== Physical Plan ==
CollectLimit (31)
+- * Project (30)
   +- * BroadcastHashJoin Inner BuildRight (29)
      :- * Project (27)
      :  +- * BroadcastHashJoin Inner BuildLeft (26)
      :     :- BroadcastExchange (22)
      :     :  +- * Project (21)
      :     :     +- * BroadcastHashJoin Inner BuildRight (20)
      :     :        :- * Filter (14)
      :     :        :  +- * HashAggregate (13)
      :     :        :     +- Exchange (12)
      :     :        :        +- * HashAggregate (11)
      :     :        :           +- * Project (10)
      :     :        :              +- * BroadcastHashJoin Inner BuildRight (9)
      :     :        :                 :- * Filter (3)
      :     :        :                 :  +- * ColumnarToRow (2)
      :     :        :                 :     +- Scan parquet default.catalog_sales (1)
      :     :        :                 +- BroadcastExchange (8)
      :     :        :                    +- * Project (7)
      :     :        :                       +- * Filter (6)
      :     :        :                          +- * ColumnarToRow (5)
      :     :        :                             +- Scan parquet default.date_dim (4)
      :     :        +- BroadcastExchange (19)
      :     :           +- * Project (18)
      :     :              +- * Filter (17)
      :     :                 +- * ColumnarToRow (16)
      :     :                    +- Scan parquet default.item (15)
      :     +- * Filter (25)
      :        +- * ColumnarToRow (24)
      :           +- Scan parquet default.catalog_sales (23)
      +- ReusedExchange (28)


(1) Scan parquet default.catalog_sales
Output [3]: [cs_sold_date_sk#1, cs_item_sk#2, cs_ext_discount_amt#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_ext_discount_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [3]: [cs_sold_date_sk#1, cs_item_sk#2, cs_ext_discount_amt#3]

(3) Filter [codegen id : 2]
Input [3]: [cs_sold_date_sk#1, cs_item_sk#2, cs_ext_discount_amt#3]
Condition : (isnotnull(cs_sold_date_sk#1) AND isnotnull(cs_item_sk#2))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#4, d_date#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-01-27), LessThanOrEqual(d_date,2000-04-26), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#4, d_date#5]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#4, d_date#5]
Condition : (((isnotnull(d_date#5) AND (d_date#5 >= 10983)) AND (d_date#5 <= 11073)) AND isnotnull(d_date_sk#4))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#4]
Input [2]: [d_date_sk#4, d_date#5]

(8) BroadcastExchange
Input [1]: [d_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#6]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#4]
Join condition: None

(10) Project [codegen id : 2]
Output [2]: [cs_item_sk#2, cs_ext_discount_amt#3]
Input [4]: [cs_sold_date_sk#1, cs_item_sk#2, cs_ext_discount_amt#3, d_date_sk#4]

(11) HashAggregate [codegen id : 2]
Input [2]: [cs_item_sk#2, cs_ext_discount_amt#3]
Keys [1]: [cs_item_sk#2]
Functions [1]: [partial_avg(UnscaledValue(cs_ext_discount_amt#3))]
Aggregate Attributes [2]: [sum#7, count#8]
Results [3]: [cs_item_sk#2, sum#9, count#10]

(12) Exchange
Input [3]: [cs_item_sk#2, sum#9, count#10]
Arguments: hashpartitioning(cs_item_sk#2, 5), true, [id=#11]

(13) HashAggregate [codegen id : 4]
Input [3]: [cs_item_sk#2, sum#9, count#10]
Keys [1]: [cs_item_sk#2]
Functions [1]: [avg(UnscaledValue(cs_ext_discount_amt#3))]
Aggregate Attributes [1]: [avg(UnscaledValue(cs_ext_discount_amt#3))#12]
Results [2]: [CheckOverflow((1.300000 * promote_precision(cast((avg(UnscaledValue(cs_ext_discount_amt#3))#12 / 100.0) as decimal(11,6)))), DecimalType(14,7), true) AS (CAST(1.3 AS DECIMAL(11,6)) * CAST(avg(cs_ext_discount_amt) AS DECIMAL(11,6)))#13, cs_item_sk#2 AS cs_item_sk#2#14]

(14) Filter [codegen id : 4]
Input [2]: [(CAST(1.3 AS DECIMAL(11,6)) * CAST(avg(cs_ext_discount_amt) AS DECIMAL(11,6)))#13, cs_item_sk#2#14]
Condition : isnotnull((CAST(1.3 AS DECIMAL(11,6)) * CAST(avg(cs_ext_discount_amt) AS DECIMAL(11,6)))#13)

(15) Scan parquet default.item
Output [2]: [i_item_sk#15, i_manufact_id#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,977), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_manufact_id:int>

(16) ColumnarToRow [codegen id : 3]
Input [2]: [i_item_sk#15, i_manufact_id#16]

(17) Filter [codegen id : 3]
Input [2]: [i_item_sk#15, i_manufact_id#16]
Condition : ((isnotnull(i_manufact_id#16) AND (i_manufact_id#16 = 977)) AND isnotnull(i_item_sk#15))

(18) Project [codegen id : 3]
Output [1]: [i_item_sk#15]
Input [2]: [i_item_sk#15, i_manufact_id#16]

(19) BroadcastExchange
Input [1]: [i_item_sk#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#17]

(20) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_item_sk#2#14]
Right keys [1]: [i_item_sk#15]
Join condition: None

(21) Project [codegen id : 4]
Output [2]: [(CAST(1.3 AS DECIMAL(11,6)) * CAST(avg(cs_ext_discount_amt) AS DECIMAL(11,6)))#13, i_item_sk#15]
Input [3]: [(CAST(1.3 AS DECIMAL(11,6)) * CAST(avg(cs_ext_discount_amt) AS DECIMAL(11,6)))#13, cs_item_sk#2#14, i_item_sk#15]

(22) BroadcastExchange
Input [2]: [(CAST(1.3 AS DECIMAL(11,6)) * CAST(avg(cs_ext_discount_amt) AS DECIMAL(11,6)))#13, i_item_sk#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#18]

(23) Scan parquet default.catalog_sales
Output [3]: [cs_sold_date_sk#1, cs_item_sk#2, cs_ext_discount_amt#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_ext_discount_amt), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_ext_discount_amt:decimal(7,2)>

(24) ColumnarToRow
Input [3]: [cs_sold_date_sk#1, cs_item_sk#2, cs_ext_discount_amt#3]

(25) Filter
Input [3]: [cs_sold_date_sk#1, cs_item_sk#2, cs_ext_discount_amt#3]
Condition : ((isnotnull(cs_item_sk#2) AND isnotnull(cs_ext_discount_amt#3)) AND isnotnull(cs_sold_date_sk#1))

(26) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [i_item_sk#15]
Right keys [1]: [cs_item_sk#2]
Join condition: (cast(cs_ext_discount_amt#3 as decimal(14,7)) > (CAST(1.3 AS DECIMAL(11,6)) * CAST(avg(cs_ext_discount_amt) AS DECIMAL(11,6)))#13)

(27) Project [codegen id : 6]
Output [1]: [cs_sold_date_sk#1]
Input [5]: [(CAST(1.3 AS DECIMAL(11,6)) * CAST(avg(cs_ext_discount_amt) AS DECIMAL(11,6)))#13, i_item_sk#15, cs_sold_date_sk#1, cs_item_sk#2, cs_ext_discount_amt#3]

(28) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#4]

(29) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#4]
Join condition: None

(30) Project [codegen id : 6]
Output [1]: [1 AS excess discount amount #19]
Input [2]: [cs_sold_date_sk#1, d_date_sk#4]

(31) CollectLimit
Input [1]: [excess discount amount #19]
Arguments: 100

