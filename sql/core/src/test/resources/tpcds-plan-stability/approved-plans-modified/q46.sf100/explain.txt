== Physical Plan ==
TakeOrderedAndProject (51)
+- * Project (50)
   +- * SortMergeJoin Inner (49)
      :- * Sort (46)
      :  +- Exchange (45)
      :     +- * Project (44)
      :        +- * SortMergeJoin Inner (43)
      :           :- * Sort (5)
      :           :  +- Exchange (4)
      :           :     +- * Filter (3)
      :           :        +- * ColumnarToRow (2)
      :           :           +- Scan parquet default.customer (1)
      :           +- * Sort (42)
      :              +- Exchange (41)
      :                 +- * HashAggregate (40)
      :                    +- * HashAggregate (39)
      :                       +- * Project (38)
      :                          +- * SortMergeJoin Inner (37)
      :                             :- * Sort (31)
      :                             :  +- Exchange (30)
      :                             :     +- * Project (29)
      :                             :        +- * BroadcastHashJoin Inner BuildRight (28)
      :                             :           :- * Project (22)
      :                             :           :  +- * BroadcastHashJoin Inner BuildRight (21)
      :                             :           :     :- * Project (15)
      :                             :           :     :  +- * BroadcastHashJoin Inner BuildRight (14)
      :                             :           :     :     :- * Filter (8)
      :                             :           :     :     :  +- * ColumnarToRow (7)
      :                             :           :     :     :     +- Scan parquet default.store_sales (6)
      :                             :           :     :     +- BroadcastExchange (13)
      :                             :           :     :        +- * Project (12)
      :                             :           :     :           +- * Filter (11)
      :                             :           :     :              +- * ColumnarToRow (10)
      :                             :           :     :                 +- Scan parquet default.date_dim (9)
      :                             :           :     +- BroadcastExchange (20)
      :                             :           :        +- * Project (19)
      :                             :           :           +- * Filter (18)
      :                             :           :              +- * ColumnarToRow (17)
      :                             :           :                 +- Scan parquet default.store (16)
      :                             :           +- BroadcastExchange (27)
      :                             :              +- * Project (26)
      :                             :                 +- * Filter (25)
      :                             :                    +- * ColumnarToRow (24)
      :                             :                       +- Scan parquet default.household_demographics (23)
      :                             +- * Sort (36)
      :                                +- Exchange (35)
      :                                   +- * Filter (34)
      :                                      +- * ColumnarToRow (33)
      :                                         +- Scan parquet default.customer_address (32)
      +- * Sort (48)
         +- ReusedExchange (47)


(1) Scan parquet default.customer
Output [4]: [c_customer_sk#1, c_current_addr_sk#2, c_first_name#3, c_last_name#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [c_customer_sk#1, c_current_addr_sk#2, c_first_name#3, c_last_name#4]

(3) Filter [codegen id : 1]
Input [4]: [c_customer_sk#1, c_current_addr_sk#2, c_first_name#3, c_last_name#4]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_current_addr_sk#2))

(4) Exchange
Input [4]: [c_customer_sk#1, c_current_addr_sk#2, c_first_name#3, c_last_name#4]
Arguments: hashpartitioning(c_customer_sk#1, 5), true, [id=#5]

(5) Sort [codegen id : 2]
Input [4]: [c_customer_sk#1, c_current_addr_sk#2, c_first_name#3, c_last_name#4]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_sales
Output [8]: [ss_sold_date_sk#6, ss_customer_sk#7, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#11, ss_coupon_amt#12, ss_net_profit#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [In(ss_sold_date_sksNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_coupon_amt:decimal(7,2),ss_net_profit:decimal(7,2)>

(7) ColumnarToRow [codegen id : 6]
Input [8]: [ss_sold_date_sk#6, ss_customer_sk#7, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#11, ss_coupon_amt#12, ss_net_profit#13]

(8) Filter [codegen id : 6]
Input [8]: [ss_sold_date_sk#6, ss_customer_sk#7, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#11, ss_coupon_amt#12, ss_net_profit#13]
Condition : (((((ss_sold_date_sk#6 INSET (2451790,2451609,2451294,2451658,2452099,2451482,2451700,2452035,2452274,2451258,2451847,2451714,2451937,2451860,2451601,2451573,2451686,2452008,2451454,2451882,2451832,2452259,2451671,2451903,2451497,2452162,2451322,2451517,2451434,2451273,2451405,2452105,2451924,2452050,2452126,2452203,2451818,2451559,2451853,2451238,2451209,2451357,2451959,2452239,2451608,2452141,2452252,2451623,2451867,2451504,2451910,2452232,2451874,2451581,2451329,2451223,2451783,2452267,2452042,2451895,2451986,2452091,2451693,2451265,2451678,2451825,2451244,2451490,2451287,2451419,2451546,2451245,2451713,2452070,2451189,2451804,2451468,2451525,2451902,2452077,2452161,2451378,2451567,2451931,2451699,2451251,2451840,2452253,2451938,2451510,2452231,2452036,2451616,2451230,2452112,2451846,2451966,2451538,2451819,2452140,2452183,2451496,2451791,2451595,2451574,2451363,2451994,2451917,2451602,2452273,2451237,2451350,2451685,2451259,2451286,2451972,2452224,2451370,2452245,2451643,2451993,2451315,2451301,2451560,2451433,2452225,2451532,2451755,2451854,2451545,2451210,2451587,2451987,2451447,2452197,2451552,2451896,2451679,2452147,2451735,2452022,2451707,2451868,2451398,2451777,2451181,2451503,2451839,2452175,2451441,2452154,2452029,2452196,2451952,2451805,2451965,2451539,2452001,2451833,2451392,2451524,2451461,2452133,2451448,2451307,2451615,2451769,2451412,2451349,2451651,2451763,2451203,2452064,2451980,2451748,2451637,2452182,2451279,2451231,2451734,2451692,2452071,2451336,2451300,2451727,2451630,2452189,2451875,2451973,2451328,2452084,2451399,2451944,2452204,2451385,2451776,2451384,2451272,2451812,2451749,2451566,2451182,2451945,2451420,2451930,2452057,2451756,2451644,2451314,2451364,2452007,2451798,2451475,2452015,2451440,2452000,2451588,2452148,2451195,2452217,2451371,2452176,2451531,2452134,2452211,2451462,2451188,2451741,2452119,2451342,2451580,2451672,2451889,2451280,2451406,2451293,2451217,2452049,2452106,2451321,2451335,2451483,2452260,2451657,2451979,2451518,2451629,2451728,2451923,2451861,2451951,2452246,2451455,2451356,2451224,2452210,2452021,2451427,2451202,2452098,2452168,2451553,2451391,2451706,2452155,2451196,2451770,2452127,2451762,2452078,2451958,2451721,2451665,2452120,2451252,2452085,2452092,2451476,2452218,2452169,2451797,2451650,2451881,2451511,2451469,2451888,2452043,2452266,2451664,2452014,2451343,2452056,2452190,2452063,2451636,2451742,2451811,2451720,2451308,2451489,2451413,2451216,2451594,2452238,2451784,2451426,2451622,2451916,2452113,2451909,2451266,2451826,2451377,2452028) AND isnotnull(ss_sold_date_sk#6)) AND isnotnull(ss_store_sk#10)) AND isnotnull(ss_hdemo_sk#8)) AND isnotnull(ss_addr_sk#9)) AND isnotnull(ss_customer_sk#7))

(9) Scan parquet default.date_dim
Output [3]: [d_date_sk#14, d_year#15, d_dow#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_dow, [6,0]), In(d_year, [1999,2000,2001]), In(d_date_sksNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_dow:int>

(10) ColumnarToRow [codegen id : 3]
Input [3]: [d_date_sk#14, d_year#15, d_dow#16]

(11) Filter [codegen id : 3]
Input [3]: [d_date_sk#14, d_year#15, d_dow#16]
Condition : (((d_dow#16 IN (6,0) AND d_year#15 IN (1999,2000,2001)) AND d_date_sk#14 INSET (2451790,2451609,2451294,2451658,2452099,2451482,2451700,2452035,2452274,2451258,2451847,2451714,2451937,2451860,2451601,2451573,2451686,2452008,2451454,2451882,2451832,2452259,2451671,2451903,2451497,2452162,2451322,2451517,2451434,2451273,2451405,2452105,2451924,2452050,2452126,2452203,2451818,2451559,2451853,2451238,2451209,2451357,2451959,2452239,2451608,2452141,2452252,2451623,2451867,2451504,2451910,2452232,2451874,2451581,2451329,2451223,2451783,2452267,2452042,2451895,2451986,2452091,2451693,2451265,2451678,2451825,2451244,2451490,2451287,2451419,2451546,2451245,2451713,2452070,2451189,2451804,2451468,2451525,2451902,2452077,2452161,2451378,2451567,2451931,2451699,2451251,2451840,2452253,2451938,2451510,2452231,2452036,2451616,2451230,2452112,2451846,2451966,2451538,2451819,2452140,2452183,2451496,2451791,2451595,2451574,2451363,2451994,2451917,2451602,2452273,2451237,2451350,2451685,2451259,2451286,2451972,2452224,2451370,2452245,2451643,2451993,2451315,2451301,2451560,2451433,2452225,2451532,2451755,2451854,2451545,2451210,2451587,2451987,2451447,2452197,2451552,2451896,2451679,2452147,2451735,2452022,2451707,2451868,2451398,2451777,2451181,2451503,2451839,2452175,2451441,2452154,2452029,2452196,2451952,2451805,2451965,2451539,2452001,2451833,2451392,2451524,2451461,2452133,2451448,2451307,2451615,2451769,2451412,2451349,2451651,2451763,2451203,2452064,2451980,2451748,2451637,2452182,2451279,2451231,2451734,2451692,2452071,2451336,2451300,2451727,2451630,2452189,2451875,2451973,2451328,2452084,2451399,2451944,2452204,2451385,2451776,2451384,2451272,2451812,2451749,2451566,2451182,2451945,2451420,2451930,2452057,2451756,2451644,2451314,2451364,2452007,2451798,2451475,2452015,2451440,2452000,2451588,2452148,2451195,2452217,2451371,2452176,2451531,2452134,2452211,2451462,2451188,2451741,2452119,2451342,2451580,2451672,2451889,2451280,2451406,2451293,2451217,2452049,2452106,2451321,2451335,2451483,2452260,2451657,2451979,2451518,2451629,2451728,2451923,2451861,2451951,2452246,2451455,2451356,2451224,2452210,2452021,2451427,2451202,2452098,2452168,2451553,2451391,2451706,2452155,2451196,2451770,2452127,2451762,2452078,2451958,2451721,2451665,2452120,2451252,2452085,2452092,2451476,2452218,2452169,2451797,2451650,2451881,2451511,2451469,2451888,2452043,2452266,2451664,2452014,2451343,2452056,2452190,2452063,2451636,2451742,2451811,2451720,2451308,2451489,2451413,2451216,2451594,2452238,2451784,2451426,2451622,2451916,2452113,2451909,2451266,2451826,2451377,2452028)) AND isnotnull(d_date_sk#14))

(12) Project [codegen id : 3]
Output [1]: [d_date_sk#14]
Input [3]: [d_date_sk#14, d_year#15, d_dow#16]

(13) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#17]

(14) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#14]
Join condition: None

(15) Project [codegen id : 6]
Output [7]: [ss_customer_sk#7, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#11, ss_coupon_amt#12, ss_net_profit#13]
Input [9]: [ss_sold_date_sk#6, ss_customer_sk#7, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#11, ss_coupon_amt#12, ss_net_profit#13, d_date_sk#14]

(16) Scan parquet default.store
Output [2]: [s_store_sk#18, s_city#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [In(s_city, [Midway,Concord,Spring Hill,Brownsville,Greenville]), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_city:string>

(17) ColumnarToRow [codegen id : 4]
Input [2]: [s_store_sk#18, s_city#19]

(18) Filter [codegen id : 4]
Input [2]: [s_store_sk#18, s_city#19]
Condition : (s_city#19 IN (Midway,Concord,Spring Hill,Brownsville,Greenville) AND isnotnull(s_store_sk#18))

(19) Project [codegen id : 4]
Output [1]: [s_store_sk#18]
Input [2]: [s_store_sk#18, s_city#19]

(20) BroadcastExchange
Input [1]: [s_store_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#20]

(21) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_store_sk#10]
Right keys [1]: [s_store_sk#18]
Join condition: None

(22) Project [codegen id : 6]
Output [6]: [ss_customer_sk#7, ss_hdemo_sk#8, ss_addr_sk#9, ss_ticket_number#11, ss_coupon_amt#12, ss_net_profit#13]
Input [8]: [ss_customer_sk#7, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#11, ss_coupon_amt#12, ss_net_profit#13, s_store_sk#18]

(23) Scan parquet default.household_demographics
Output [3]: [hd_demo_sk#21, hd_dep_count#22, hd_vehicle_count#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [Or(EqualTo(hd_dep_count,5),EqualTo(hd_vehicle_count,3)), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>

(24) ColumnarToRow [codegen id : 5]
Input [3]: [hd_demo_sk#21, hd_dep_count#22, hd_vehicle_count#23]

(25) Filter [codegen id : 5]
Input [3]: [hd_demo_sk#21, hd_dep_count#22, hd_vehicle_count#23]
Condition : (((hd_dep_count#22 = 5) OR (hd_vehicle_count#23 = 3)) AND isnotnull(hd_demo_sk#21))

(26) Project [codegen id : 5]
Output [1]: [hd_demo_sk#21]
Input [3]: [hd_demo_sk#21, hd_dep_count#22, hd_vehicle_count#23]

(27) BroadcastExchange
Input [1]: [hd_demo_sk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#24]

(28) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_hdemo_sk#8]
Right keys [1]: [hd_demo_sk#21]
Join condition: None

(29) Project [codegen id : 6]
Output [5]: [ss_customer_sk#7, ss_addr_sk#9, ss_ticket_number#11, ss_coupon_amt#12, ss_net_profit#13]
Input [7]: [ss_customer_sk#7, ss_hdemo_sk#8, ss_addr_sk#9, ss_ticket_number#11, ss_coupon_amt#12, ss_net_profit#13, hd_demo_sk#21]

(30) Exchange
Input [5]: [ss_customer_sk#7, ss_addr_sk#9, ss_ticket_number#11, ss_coupon_amt#12, ss_net_profit#13]
Arguments: hashpartitioning(ss_addr_sk#9, 5), true, [id=#25]

(31) Sort [codegen id : 7]
Input [5]: [ss_customer_sk#7, ss_addr_sk#9, ss_ticket_number#11, ss_coupon_amt#12, ss_net_profit#13]
Arguments: [ss_addr_sk#9 ASC NULLS FIRST], false, 0

(32) Scan parquet default.customer_address
Output [2]: [ca_address_sk#26, ca_city#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_city)]
ReadSchema: struct<ca_address_sk:int,ca_city:string>

(33) ColumnarToRow [codegen id : 8]
Input [2]: [ca_address_sk#26, ca_city#27]

(34) Filter [codegen id : 8]
Input [2]: [ca_address_sk#26, ca_city#27]
Condition : (isnotnull(ca_address_sk#26) AND isnotnull(ca_city#27))

(35) Exchange
Input [2]: [ca_address_sk#26, ca_city#27]
Arguments: hashpartitioning(ca_address_sk#26, 5), true, [id=#28]

(36) Sort [codegen id : 9]
Input [2]: [ca_address_sk#26, ca_city#27]
Arguments: [ca_address_sk#26 ASC NULLS FIRST], false, 0

(37) SortMergeJoin [codegen id : 10]
Left keys [1]: [ss_addr_sk#9]
Right keys [1]: [ca_address_sk#26]
Join condition: None

(38) Project [codegen id : 10]
Output [6]: [ss_customer_sk#7, ss_addr_sk#9, ss_ticket_number#11, ss_coupon_amt#12, ss_net_profit#13, ca_city#27]
Input [7]: [ss_customer_sk#7, ss_addr_sk#9, ss_ticket_number#11, ss_coupon_amt#12, ss_net_profit#13, ca_address_sk#26, ca_city#27]

(39) HashAggregate [codegen id : 10]
Input [6]: [ss_customer_sk#7, ss_addr_sk#9, ss_ticket_number#11, ss_coupon_amt#12, ss_net_profit#13, ca_city#27]
Keys [4]: [ss_ticket_number#11, ss_customer_sk#7, ss_addr_sk#9, ca_city#27]
Functions [2]: [partial_sum(UnscaledValue(ss_coupon_amt#12)), partial_sum(UnscaledValue(ss_net_profit#13))]
Aggregate Attributes [2]: [sum#29, sum#30]
Results [6]: [ss_ticket_number#11, ss_customer_sk#7, ss_addr_sk#9, ca_city#27, sum#31, sum#32]

(40) HashAggregate [codegen id : 10]
Input [6]: [ss_ticket_number#11, ss_customer_sk#7, ss_addr_sk#9, ca_city#27, sum#31, sum#32]
Keys [4]: [ss_ticket_number#11, ss_customer_sk#7, ss_addr_sk#9, ca_city#27]
Functions [2]: [sum(UnscaledValue(ss_coupon_amt#12)), sum(UnscaledValue(ss_net_profit#13))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_coupon_amt#12))#33, sum(UnscaledValue(ss_net_profit#13))#34]
Results [5]: [ss_ticket_number#11, ss_customer_sk#7, ca_city#27 AS bought_city#35, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#12))#33,17,2) AS amt#36, MakeDecimal(sum(UnscaledValue(ss_net_profit#13))#34,17,2) AS profit#37]

(41) Exchange
Input [5]: [ss_ticket_number#11, ss_customer_sk#7, bought_city#35, amt#36, profit#37]
Arguments: hashpartitioning(ss_customer_sk#7, 5), true, [id=#38]

(42) Sort [codegen id : 11]
Input [5]: [ss_ticket_number#11, ss_customer_sk#7, bought_city#35, amt#36, profit#37]
Arguments: [ss_customer_sk#7 ASC NULLS FIRST], false, 0

(43) SortMergeJoin [codegen id : 12]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#7]
Join condition: None

(44) Project [codegen id : 12]
Output [7]: [c_current_addr_sk#2, c_first_name#3, c_last_name#4, ss_ticket_number#11, bought_city#35, amt#36, profit#37]
Input [9]: [c_customer_sk#1, c_current_addr_sk#2, c_first_name#3, c_last_name#4, ss_ticket_number#11, ss_customer_sk#7, bought_city#35, amt#36, profit#37]

(45) Exchange
Input [7]: [c_current_addr_sk#2, c_first_name#3, c_last_name#4, ss_ticket_number#11, bought_city#35, amt#36, profit#37]
Arguments: hashpartitioning(c_current_addr_sk#2, 5), true, [id=#39]

(46) Sort [codegen id : 13]
Input [7]: [c_current_addr_sk#2, c_first_name#3, c_last_name#4, ss_ticket_number#11, bought_city#35, amt#36, profit#37]
Arguments: [c_current_addr_sk#2 ASC NULLS FIRST], false, 0

(47) ReusedExchange [Reuses operator id: 35]
Output [2]: [ca_address_sk#26, ca_city#27]

(48) Sort [codegen id : 15]
Input [2]: [ca_address_sk#26, ca_city#27]
Arguments: [ca_address_sk#26 ASC NULLS FIRST], false, 0

(49) SortMergeJoin [codegen id : 16]
Left keys [1]: [c_current_addr_sk#2]
Right keys [1]: [ca_address_sk#26]
Join condition: NOT (ca_city#27 = bought_city#35)

(50) Project [codegen id : 16]
Output [7]: [c_last_name#4, c_first_name#3, ca_city#27, bought_city#35, ss_ticket_number#11, amt#36, profit#37]
Input [9]: [c_current_addr_sk#2, c_first_name#3, c_last_name#4, ss_ticket_number#11, bought_city#35, amt#36, profit#37, ca_address_sk#26, ca_city#27]

(51) TakeOrderedAndProject
Input [7]: [c_last_name#4, c_first_name#3, ca_city#27, bought_city#35, ss_ticket_number#11, amt#36, profit#37]
Arguments: 100, [c_last_name#4 ASC NULLS FIRST, c_first_name#3 ASC NULLS FIRST, ca_city#27 ASC NULLS FIRST, bought_city#35 ASC NULLS FIRST, ss_ticket_number#11 ASC NULLS FIRST], [c_last_name#4, c_first_name#3, ca_city#27, bought_city#35, ss_ticket_number#11, amt#36, profit#37]

