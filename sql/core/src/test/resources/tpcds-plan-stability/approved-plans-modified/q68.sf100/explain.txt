== Physical Plan ==
TakeOrderedAndProject (52)
+- * Project (51)
   +- * SortMergeJoin Inner (50)
      :- * Sort (44)
      :  +- Exchange (43)
      :     +- * Project (42)
      :        +- * SortMergeJoin Inner (41)
      :           :- * Sort (5)
      :           :  +- Exchange (4)
      :           :     +- * Filter (3)
      :           :        +- * ColumnarToRow (2)
      :           :           +- Scan parquet default.customer (1)
      :           +- * Sort (40)
      :              +- Exchange (39)
      :                 +- * HashAggregate (38)
      :                    +- Exchange (37)
      :                       +- * HashAggregate (36)
      :                          +- * Project (35)
      :                             +- * BroadcastHashJoin Inner BuildLeft (34)
      :                                :- BroadcastExchange (30)
      :                                :  +- * Project (29)
      :                                :     +- * BroadcastHashJoin Inner BuildRight (28)
      :                                :        :- * Project (22)
      :                                :        :  +- * BroadcastHashJoin Inner BuildRight (21)
      :                                :        :     :- * Project (15)
      :                                :        :     :  +- * BroadcastHashJoin Inner BuildRight (14)
      :                                :        :     :     :- * Filter (8)
      :                                :        :     :     :  +- * ColumnarToRow (7)
      :                                :        :     :     :     +- Scan parquet default.store_sales (6)
      :                                :        :     :     +- BroadcastExchange (13)
      :                                :        :     :        +- * Project (12)
      :                                :        :     :           +- * Filter (11)
      :                                :        :     :              +- * ColumnarToRow (10)
      :                                :        :     :                 +- Scan parquet default.date_dim (9)
      :                                :        :     +- BroadcastExchange (20)
      :                                :        :        +- * Project (19)
      :                                :        :           +- * Filter (18)
      :                                :        :              +- * ColumnarToRow (17)
      :                                :        :                 +- Scan parquet default.store (16)
      :                                :        +- BroadcastExchange (27)
      :                                :           +- * Project (26)
      :                                :              +- * Filter (25)
      :                                :                 +- * ColumnarToRow (24)
      :                                :                    +- Scan parquet default.household_demographics (23)
      :                                +- * Filter (33)
      :                                   +- * ColumnarToRow (32)
      :                                      +- Scan parquet default.customer_address (31)
      +- * Sort (49)
         +- Exchange (48)
            +- * Filter (47)
               +- * ColumnarToRow (46)
                  +- Scan parquet default.customer_address (45)


(1) Scan parquet default.customer
Output [4]: [c_customer_sk#1, c_current_addr_sk#2, c_first_name#3, c_last_name#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [c_customer_sk#1, c_current_addr_sk#2, c_first_name#3, c_last_name#4]

(3) Filter [codegen id : 1]
Input [4]: [c_customer_sk#1, c_current_addr_sk#2, c_first_name#3, c_last_name#4]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_current_addr_sk#2))

(4) Exchange
Input [4]: [c_customer_sk#1, c_current_addr_sk#2, c_first_name#3, c_last_name#4]
Arguments: hashpartitioning(c_customer_sk#1, 5), true, [id=#5]

(5) Sort [codegen id : 2]
Input [4]: [c_customer_sk#1, c_current_addr_sk#2, c_first_name#3, c_last_name#4]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_sales
Output [9]: [ss_sold_date_sk#6, ss_customer_sk#7, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#11, ss_ext_sales_price#12, ss_ext_list_price#13, ss_ext_tax#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [In(ss_sold_date_sk, [2451790,2451180,2452216,2451454,2452184,2451485,2451850,2451514,2452062,2451270,2452123,2451758,2451971,2451546,2451942,2451393,2451667,2451453,2452215,2451819,2451331,2451577,2451911,2452245,2451301,2451545,2451605,2451943,2451851,2451181,2452154,2451820,2452001,2451362,2451392,2451240,2452032,2451637,2451484,2452124,2451300,2451727,2452093,2451759,2451698,2451332,2451606,2451666,2451912,2452185,2451211,2451361,2452031,2451212,2451880,2451789,2451423,2451576,2451728,2452246,2452155,2452092,2451881,2451970,2451697,2452063,2451271,2451636,2451515,2451424,2451239,2452002]), IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_ext_sales_price:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2)>

(7) ColumnarToRow [codegen id : 6]
Input [9]: [ss_sold_date_sk#6, ss_customer_sk#7, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#11, ss_ext_sales_price#12, ss_ext_list_price#13, ss_ext_tax#14]

(8) Filter [codegen id : 6]
Input [9]: [ss_sold_date_sk#6, ss_customer_sk#7, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#11, ss_ext_sales_price#12, ss_ext_list_price#13, ss_ext_tax#14]
Condition : (((((ss_sold_date_sk#6 INSET (2451790,2451180,2452216,2451454,2452184,2451485,2451850,2451514,2452062,2451270,2452123,2451758,2451971,2451546,2451942,2451393,2451667,2451453,2452215,2451819,2451331,2451577,2451911,2452245,2451301,2451545,2451605,2451943,2451851,2451181,2452154,2451820,2452001,2451362,2451392,2451240,2452032,2451637,2451484,2452124,2451300,2451727,2452093,2451759,2451698,2451332,2451606,2451666,2451912,2452185,2451211,2451361,2452031,2451212,2451880,2451789,2451423,2451576,2451728,2452246,2452155,2452092,2451881,2451970,2451697,2452063,2451271,2451636,2451515,2451424,2451239,2452002) AND isnotnull(ss_sold_date_sk#6)) AND isnotnull(ss_store_sk#10)) AND isnotnull(ss_hdemo_sk#8)) AND isnotnull(ss_addr_sk#9)) AND isnotnull(ss_customer_sk#7))

(9) Scan parquet default.date_dim
Output [3]: [d_date_sk#15, d_year#16, d_dom#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_dom), GreaterThanOrEqual(d_dom,1), LessThanOrEqual(d_dom,2), In(d_year, [1999,2000,2001]), In(d_date_sk, [2451790,2451180,2452216,2451454,2452184,2451485,2451850,2451514,2452062,2451270,2452123,2451758,2451971,2451546,2451942,2451393,2451667,2451453,2452215,2451819,2451331,2451577,2451911,2452245,2451301,2451545,2451605,2451943,2451851,2451181,2452154,2451820,2452001,2451362,2451392,2451240,2452032,2451637,2451484,2452124,2451300,2451727,2452093,2451759,2451698,2451332,2451606,2451666,2451912,2452185,2451211,2451361,2452031,2451212,2451880,2451789,2451423,2451576,2451728,2452246,2452155,2452092,2451881,2451970,2451697,2452063,2451271,2451636,2451515,2451424,2451239,2452002]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_dom:int>

(10) ColumnarToRow [codegen id : 3]
Input [3]: [d_date_sk#15, d_year#16, d_dom#17]

(11) Filter [codegen id : 3]
Input [3]: [d_date_sk#15, d_year#16, d_dom#17]
Condition : (((((isnotnull(d_dom#17) AND (d_dom#17 >= 1)) AND (d_dom#17 <= 2)) AND d_year#16 IN (1999,2000,2001)) AND d_date_sk#15 INSET (2451790,2451180,2452216,2451454,2452184,2451485,2451850,2451514,2452062,2451270,2452123,2451758,2451971,2451546,2451942,2451393,2451667,2451453,2452215,2451819,2451331,2451577,2451911,2452245,2451301,2451545,2451605,2451943,2451851,2451181,2452154,2451820,2452001,2451362,2451392,2451240,2452032,2451637,2451484,2452124,2451300,2451727,2452093,2451759,2451698,2451332,2451606,2451666,2451912,2452185,2451211,2451361,2452031,2451212,2451880,2451789,2451423,2451576,2451728,2452246,2452155,2452092,2451881,2451970,2451697,2452063,2451271,2451636,2451515,2451424,2451239,2452002)) AND isnotnull(d_date_sk#15))

(12) Project [codegen id : 3]
Output [1]: [d_date_sk#15]
Input [3]: [d_date_sk#15, d_year#16, d_dom#17]

(13) BroadcastExchange
Input [1]: [d_date_sk#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#18]

(14) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#15]
Join condition: None

(15) Project [codegen id : 6]
Output [8]: [ss_customer_sk#7, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#11, ss_ext_sales_price#12, ss_ext_list_price#13, ss_ext_tax#14]
Input [10]: [ss_sold_date_sk#6, ss_customer_sk#7, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#11, ss_ext_sales_price#12, ss_ext_list_price#13, ss_ext_tax#14, d_date_sk#15]

(16) Scan parquet default.store
Output [2]: [s_store_sk#19, s_city#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [In(s_city, [Midway,Fairview]), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_city:string>

(17) ColumnarToRow [codegen id : 4]
Input [2]: [s_store_sk#19, s_city#20]

(18) Filter [codegen id : 4]
Input [2]: [s_store_sk#19, s_city#20]
Condition : (s_city#20 IN (Midway,Fairview) AND isnotnull(s_store_sk#19))

(19) Project [codegen id : 4]
Output [1]: [s_store_sk#19]
Input [2]: [s_store_sk#19, s_city#20]

(20) BroadcastExchange
Input [1]: [s_store_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#21]

(21) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_store_sk#10]
Right keys [1]: [s_store_sk#19]
Join condition: None

(22) Project [codegen id : 6]
Output [7]: [ss_customer_sk#7, ss_hdemo_sk#8, ss_addr_sk#9, ss_ticket_number#11, ss_ext_sales_price#12, ss_ext_list_price#13, ss_ext_tax#14]
Input [9]: [ss_customer_sk#7, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#11, ss_ext_sales_price#12, ss_ext_list_price#13, ss_ext_tax#14, s_store_sk#19]

(23) Scan parquet default.household_demographics
Output [3]: [hd_demo_sk#22, hd_dep_count#23, hd_vehicle_count#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [Or(EqualTo(hd_dep_count,5),EqualTo(hd_vehicle_count,3)), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>

(24) ColumnarToRow [codegen id : 5]
Input [3]: [hd_demo_sk#22, hd_dep_count#23, hd_vehicle_count#24]

(25) Filter [codegen id : 5]
Input [3]: [hd_demo_sk#22, hd_dep_count#23, hd_vehicle_count#24]
Condition : (((hd_dep_count#23 = 5) OR (hd_vehicle_count#24 = 3)) AND isnotnull(hd_demo_sk#22))

(26) Project [codegen id : 5]
Output [1]: [hd_demo_sk#22]
Input [3]: [hd_demo_sk#22, hd_dep_count#23, hd_vehicle_count#24]

(27) BroadcastExchange
Input [1]: [hd_demo_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#25]

(28) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_hdemo_sk#8]
Right keys [1]: [hd_demo_sk#22]
Join condition: None

(29) Project [codegen id : 6]
Output [6]: [ss_customer_sk#7, ss_addr_sk#9, ss_ticket_number#11, ss_ext_sales_price#12, ss_ext_list_price#13, ss_ext_tax#14]
Input [8]: [ss_customer_sk#7, ss_hdemo_sk#8, ss_addr_sk#9, ss_ticket_number#11, ss_ext_sales_price#12, ss_ext_list_price#13, ss_ext_tax#14, hd_demo_sk#22]

(30) BroadcastExchange
Input [6]: [ss_customer_sk#7, ss_addr_sk#9, ss_ticket_number#11, ss_ext_sales_price#12, ss_ext_list_price#13, ss_ext_tax#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#26]

(31) Scan parquet default.customer_address
Output [2]: [ca_address_sk#27, ca_city#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_city)]
ReadSchema: struct<ca_address_sk:int,ca_city:string>

(32) ColumnarToRow
Input [2]: [ca_address_sk#27, ca_city#28]

(33) Filter
Input [2]: [ca_address_sk#27, ca_city#28]
Condition : (isnotnull(ca_address_sk#27) AND isnotnull(ca_city#28))

(34) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_addr_sk#9]
Right keys [1]: [ca_address_sk#27]
Join condition: None

(35) Project [codegen id : 7]
Output [7]: [ss_customer_sk#7, ss_addr_sk#9, ss_ticket_number#11, ss_ext_sales_price#12, ss_ext_list_price#13, ss_ext_tax#14, ca_city#28]
Input [8]: [ss_customer_sk#7, ss_addr_sk#9, ss_ticket_number#11, ss_ext_sales_price#12, ss_ext_list_price#13, ss_ext_tax#14, ca_address_sk#27, ca_city#28]

(36) HashAggregate [codegen id : 7]
Input [7]: [ss_customer_sk#7, ss_addr_sk#9, ss_ticket_number#11, ss_ext_sales_price#12, ss_ext_list_price#13, ss_ext_tax#14, ca_city#28]
Keys [4]: [ss_ticket_number#11, ss_customer_sk#7, ss_addr_sk#9, ca_city#28]
Functions [3]: [partial_sum(UnscaledValue(ss_ext_sales_price#12)), partial_sum(UnscaledValue(ss_ext_list_price#13)), partial_sum(UnscaledValue(ss_ext_tax#14))]
Aggregate Attributes [3]: [sum#29, sum#30, sum#31]
Results [7]: [ss_ticket_number#11, ss_customer_sk#7, ss_addr_sk#9, ca_city#28, sum#32, sum#33, sum#34]

(37) Exchange
Input [7]: [ss_ticket_number#11, ss_customer_sk#7, ss_addr_sk#9, ca_city#28, sum#32, sum#33, sum#34]
Arguments: hashpartitioning(ss_ticket_number#11, ss_customer_sk#7, ss_addr_sk#9, ca_city#28, 5), true, [id=#35]

(38) HashAggregate [codegen id : 8]
Input [7]: [ss_ticket_number#11, ss_customer_sk#7, ss_addr_sk#9, ca_city#28, sum#32, sum#33, sum#34]
Keys [4]: [ss_ticket_number#11, ss_customer_sk#7, ss_addr_sk#9, ca_city#28]
Functions [3]: [sum(UnscaledValue(ss_ext_sales_price#12)), sum(UnscaledValue(ss_ext_list_price#13)), sum(UnscaledValue(ss_ext_tax#14))]
Aggregate Attributes [3]: [sum(UnscaledValue(ss_ext_sales_price#12))#36, sum(UnscaledValue(ss_ext_list_price#13))#37, sum(UnscaledValue(ss_ext_tax#14))#38]
Results [6]: [ss_ticket_number#11, ss_customer_sk#7, ca_city#28 AS bought_city#39, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#12))#36,17,2) AS extended_price#40, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#13))#37,17,2) AS list_price#41, MakeDecimal(sum(UnscaledValue(ss_ext_tax#14))#38,17,2) AS extended_tax#42]

(39) Exchange
Input [6]: [ss_ticket_number#11, ss_customer_sk#7, bought_city#39, extended_price#40, list_price#41, extended_tax#42]
Arguments: hashpartitioning(ss_customer_sk#7, 5), true, [id=#43]

(40) Sort [codegen id : 9]
Input [6]: [ss_ticket_number#11, ss_customer_sk#7, bought_city#39, extended_price#40, list_price#41, extended_tax#42]
Arguments: [ss_customer_sk#7 ASC NULLS FIRST], false, 0

(41) SortMergeJoin [codegen id : 10]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#7]
Join condition: None

(42) Project [codegen id : 10]
Output [8]: [c_current_addr_sk#2, c_first_name#3, c_last_name#4, ss_ticket_number#11, bought_city#39, extended_price#40, list_price#41, extended_tax#42]
Input [10]: [c_customer_sk#1, c_current_addr_sk#2, c_first_name#3, c_last_name#4, ss_ticket_number#11, ss_customer_sk#7, bought_city#39, extended_price#40, list_price#41, extended_tax#42]

(43) Exchange
Input [8]: [c_current_addr_sk#2, c_first_name#3, c_last_name#4, ss_ticket_number#11, bought_city#39, extended_price#40, list_price#41, extended_tax#42]
Arguments: hashpartitioning(c_current_addr_sk#2, 5), true, [id=#44]

(44) Sort [codegen id : 11]
Input [8]: [c_current_addr_sk#2, c_first_name#3, c_last_name#4, ss_ticket_number#11, bought_city#39, extended_price#40, list_price#41, extended_tax#42]
Arguments: [c_current_addr_sk#2 ASC NULLS FIRST], false, 0

(45) Scan parquet default.customer_address
Output [2]: [ca_address_sk#27, ca_city#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_city)]
ReadSchema: struct<ca_address_sk:int,ca_city:string>

(46) ColumnarToRow [codegen id : 12]
Input [2]: [ca_address_sk#27, ca_city#28]

(47) Filter [codegen id : 12]
Input [2]: [ca_address_sk#27, ca_city#28]
Condition : (isnotnull(ca_address_sk#27) AND isnotnull(ca_city#28))

(48) Exchange
Input [2]: [ca_address_sk#27, ca_city#28]
Arguments: hashpartitioning(ca_address_sk#27, 5), true, [id=#45]

(49) Sort [codegen id : 13]
Input [2]: [ca_address_sk#27, ca_city#28]
Arguments: [ca_address_sk#27 ASC NULLS FIRST], false, 0

(50) SortMergeJoin [codegen id : 14]
Left keys [1]: [c_current_addr_sk#2]
Right keys [1]: [ca_address_sk#27]
Join condition: NOT (ca_city#28 = bought_city#39)

(51) Project [codegen id : 14]
Output [8]: [c_last_name#4, c_first_name#3, ca_city#28, bought_city#39, ss_ticket_number#11, extended_price#40, extended_tax#42, list_price#41]
Input [10]: [c_current_addr_sk#2, c_first_name#3, c_last_name#4, ss_ticket_number#11, bought_city#39, extended_price#40, list_price#41, extended_tax#42, ca_address_sk#27, ca_city#28]

(52) TakeOrderedAndProject
Input [8]: [c_last_name#4, c_first_name#3, ca_city#28, bought_city#39, ss_ticket_number#11, extended_price#40, extended_tax#42, list_price#41]
Arguments: 100, [c_last_name#4 ASC NULLS FIRST, ss_ticket_number#11 ASC NULLS FIRST], [c_last_name#4, c_first_name#3, ca_city#28, bought_city#39, ss_ticket_number#11, extended_price#40, extended_tax#42, list_price#41]

